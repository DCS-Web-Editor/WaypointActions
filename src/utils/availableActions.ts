import {
  EnrouteTask,
  type TEnrouteTask,
  OptionName,
  type TOptionName,
  PerformCommand,
  type TPerformCommand,
  Task,
  type TTask,
} from "./enums";
import type { EnumList } from "../types";
import { performTask, enrouteTask, commands, options } from "./actions";

type AvailableActions = Record<
  "plane" | "helicopter" | "vehicle" | "ship",
  Record<
    "task" | "enrouteTask" | "commands" | "options",
    Record<string, Array<EnumList<TTask | TEnrouteTask | TPerformCommand | TOptionName>>>
  >
>;

export const availableActions: AvailableActions = {
  plane: {
    task: {
      default: [
        performTask[Task.noTask],
        performTask[Task.attackGroup],
        performTask[Task.attackUnit],
        performTask[Task.attackMapObject],
        performTask[Task.bombing],
        performTask[Task.bombingRunway],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.facAttackGroup],
        performTask[Task.follow],
        performTask[Task.aerobatics],
        performTask[Task.followBigFormation],
        performTask[Task.cargoTransportationPlane],
        performTask[Task.cargoUnloadPlane],
      ],
      nothing: [
        performTask[Task.noTask],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
        performTask[Task.aerobatics],
      ],
      airborne: [
        performTask[Task.noTask],
        performTask[Task.paratroopersDrop],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
        performTask[Task.followBigFormation],
      ],
      sead: [
        performTask[Task.noTask],
        performTask[Task.attackGroup],
        performTask[Task.attackUnit],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
        performTask[Task.escort],
      ],
      antiShipStrike: [
        performTask[Task.noTask],
        performTask[Task.attackGroup],
        performTask[Task.attackUnit],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
      ],
      awacs: [
        performTask[Task.noTask],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
      ],
      cas: [
        performTask[Task.noTask],
        performTask[Task.attackGroup],
        performTask[Task.attackUnit],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
        performTask[Task.aerobatics],
      ],
      cap: [
        performTask[Task.noTask],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
        performTask[Task.aerobatics],
      ],
      pinpointStrike: [
        performTask[Task.noTask],
        performTask[Task.attackMapObject],
        performTask[Task.bombing],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
      ],
      escort: [
        performTask[Task.noTask],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
        performTask[Task.escort],
      ],
      fighterSweep: [
        performTask[Task.noTask],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
        performTask[Task.aerobatics],
      ],
      gai: [
        performTask[Task.noTask],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
      ],
      groundAttack: [
        performTask[Task.noTask],
        performTask[Task.attackMapObject],
        performTask[Task.bombing],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
        performTask[Task.aerobatics],
        performTask[Task.carpetBombing],
        performTask[Task.followBigFormation],
      ],
      intercept: [
        performTask[Task.noTask],
        performTask[Task.attackGroup],
        performTask[Task.attackUnit],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
        performTask[Task.aerobatics],
      ],
      afac: [
        performTask[Task.noTask],
        performTask[Task.attackGroup],
        performTask[Task.attackUnit],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.facAttackGroup],
        performTask[Task.bombing],
        performTask[Task.attackMapObject],
        performTask[Task.follow],
      ],
      recon: [
        performTask[Task.noTask],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
        performTask[Task.aerobatics],
      ],
      refueling: [
        performTask[Task.noTask],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
        performTask[Task.recoveryTanker],
      ],
      runwayAttack: [
        performTask[Task.noTask],
        performTask[Task.attackMapObject],
        performTask[Task.bombing],
        performTask[Task.bombingRunway],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
      ],
      transport: [
        performTask[Task.noTask],
        performTask[Task.orbit],
        performTask[Task.refueling],
        performTask[Task.follow],
        performTask[Task.aerobatics],
        performTask[Task.followBigFormation],
        performTask[Task.cargoTransportationPlane],
        performTask[Task.cargoUnloadPlane],
      ],
    },
    enrouteTask: {
      default: [
        enrouteTask[Task.noTask],
        enrouteTask[EnrouteTask.engageTargets],
        enrouteTask[EnrouteTask.engageTargetsInZone],
        enrouteTask[EnrouteTask.engageGroup],
        enrouteTask[EnrouteTask.engageUnit],
        enrouteTask[EnrouteTask.awacs],
        enrouteTask[EnrouteTask.fac],
        enrouteTask[EnrouteTask.facEngageGroup],
        enrouteTask[EnrouteTask.tanker],
      ],
      nothing: [enrouteTask[EnrouteTask.noEnrouteTask]],
      sead: [
        enrouteTask[EnrouteTask.noEnrouteTask],
        enrouteTask[EnrouteTask.engageTargets],
        enrouteTask[EnrouteTask.engageTargetsInZone],
        enrouteTask[EnrouteTask.engageGroup],
        enrouteTask[EnrouteTask.engageUnit],
        enrouteTask[EnrouteTask.sead],
      ],
      antiShipStrike: [
        enrouteTask[EnrouteTask.noEnrouteTask],
        enrouteTask[EnrouteTask.engageTargets],
        enrouteTask[EnrouteTask.engageTargetsInZone],
        enrouteTask[EnrouteTask.engageGroup],
        enrouteTask[EnrouteTask.engageUnit],
        enrouteTask[EnrouteTask.antiShip],
      ],
      awacs: [enrouteTask[EnrouteTask.noEnrouteTask], enrouteTask[EnrouteTask.awacs]],
      cas: [
        enrouteTask[EnrouteTask.noEnrouteTask],
        enrouteTask[EnrouteTask.engageTargets],
        enrouteTask[EnrouteTask.engageTargetsInZone],
        enrouteTask[EnrouteTask.engageGroup],
        enrouteTask[EnrouteTask.engageUnit],
        enrouteTask[EnrouteTask.cas],
      ],
      pinpointStrike: [enrouteTask[EnrouteTask.noEnrouteTask]],
      cap: [
        enrouteTask[EnrouteTask.noEnrouteTask],
        enrouteTask[EnrouteTask.engageTargets],
        enrouteTask[EnrouteTask.engageTargetsInZone],
        enrouteTask[EnrouteTask.engageGroup],
        enrouteTask[EnrouteTask.engageUnit],
        enrouteTask[EnrouteTask.cap],
      ],
      escort: [enrouteTask[EnrouteTask.noEnrouteTask]],
      fighterSweep: [
        enrouteTask[EnrouteTask.noEnrouteTask],
        enrouteTask[EnrouteTask.engageTargets],
        enrouteTask[EnrouteTask.engageTargetsInZone],
        enrouteTask[EnrouteTask.engageGroup],
        enrouteTask[EnrouteTask.engageUnit],
        enrouteTask[EnrouteTask.fighterSweep],
      ],
      gai: [enrouteTask[EnrouteTask.noEnrouteTask]],
      groundAttack: [enrouteTask[EnrouteTask.noEnrouteTask]],
      intercept: [enrouteTask[EnrouteTask.noEnrouteTask]],
      afac: [
        enrouteTask[EnrouteTask.noEnrouteTask],
        enrouteTask[EnrouteTask.engageTargets],
        enrouteTask[EnrouteTask.engageTargetsInZone],
        enrouteTask[EnrouteTask.engageGroup],
        enrouteTask[EnrouteTask.engageUnit],
        enrouteTask[EnrouteTask.fac],
        enrouteTask[EnrouteTask.facEngageGroup],
      ],
      recon: [enrouteTask[EnrouteTask.noEnrouteTask]],
      refueling: [enrouteTask[EnrouteTask.noEnrouteTask], enrouteTask[EnrouteTask.tanker]],
      runwayAttack: [enrouteTask[EnrouteTask.noEnrouteTask]],
      transport: [enrouteTask[EnrouteTask.noEnrouteTask]],
    },
    commands: {
      default: [
        commands[PerformCommand.noAction],
        commands[PerformCommand.runScript],
        commands[PerformCommand.scriptFile],
        commands[PerformCommand.setFrequency],
        commands[PerformCommand.setFrequencyForUnit],
        commands[PerformCommand.transmitMessage],
        commands[PerformCommand.stopTransmitting],
        commands[PerformCommand.switchWaypoint],
        commands[PerformCommand.switchAction],
        commands[PerformCommand.setInvisible],
        commands[PerformCommand.setImmortal],
        commands[PerformCommand.start],
        commands[PerformCommand.activateBeacon],
        commands[PerformCommand.deactivateBeacon],
        commands[PerformCommand.elprs],
        commands[PerformCommand.smokeOnOff],
      ],
    },
    options: {
      default: [
        options[OptionName.noOption],
        options[OptionName.roe],
        options[OptionName.reactionOnThreat],
        options[OptionName.radarUsing],
        options[OptionName.flareUsing],
        options[OptionName.formation],
        options[OptionName.rtbOnBingo],
        options[OptionName.rtbOnOutOfAmmo],
        options[OptionName.silence],
        options[OptionName.awarnessLevel],
        options[OptionName.ecmUsing],
        options[OptionName.prohibitAA],
        options[OptionName.prohibitJett],
        options[OptionName.prohibitAB],
        options[OptionName.prohibitAG],
        options[OptionName.missileAttack],
        options[OptionName.prohibitWpPassReport],
        options[OptionName.radioUsageContact],
        options[OptionName.radioUsageEngage],
        options[OptionName.radioUsageKill],
        options[OptionName.jettTanksIfEmpty],
        options[OptionName.forcedAttack],
      ],
    },
  },
  helicopter: {
    task: {
      default: [
        performTask[Task.noTask],
        performTask[Task.attackGroup],
        performTask[Task.attackUnit],
        performTask[Task.attackMapObject],
        performTask[Task.bombing],
        performTask[Task.bombingRunway],
        performTask[Task.orbit],
        performTask[Task.land],
        performTask[Task.facAttackGroup],
        performTask[Task.follow],
        performTask[Task.cargoTransportation],
        performTask[Task.groundEscort],
      ],
      nothing: [
        performTask[Task.noTask],
        performTask[Task.orbit],
        performTask[Task.land],
        performTask[Task.follow],
      ],
      sead: [
        performTask[Task.noTask],
        performTask[Task.attackGroup],
        performTask[Task.attackUnit],
        performTask[Task.orbit],
        performTask[Task.land],
        performTask[Task.follow],
        performTask[Task.escort],
        performTask[Task.cargoTransportation],
        performTask[Task.groundEscort],
      ],
      antiShipStrike: [
        performTask[Task.attackGroup],
        performTask[Task.attackUnit],
        performTask[Task.orbit],
        performTask[Task.land],
        performTask[Task.follow],
        performTask[Task.cargoTransportation],
      ],
      cas: [
        performTask[Task.noTask],
        performTask[Task.attackGroup],
        performTask[Task.attackUnit],
        performTask[Task.orbit],
        performTask[Task.land],
        performTask[Task.follow],
        performTask[Task.embarking],
        performTask[Task.disembarking],
        performTask[Task.cargoTransportation],
        performTask[Task.groundEscort],
      ],
      groundAttack: [
        performTask[Task.noTask],
        performTask[Task.attackMapObject],
        performTask[Task.bombing],
        performTask[Task.orbit],
        performTask[Task.land],
        performTask[Task.follow],
        performTask[Task.embarking],
        performTask[Task.disembarking],
        performTask[Task.groundEscort],
      ],
      afac: [
        performTask[Task.noTask],
        performTask[Task.attackGroup],
        performTask[Task.attackUnit],
        performTask[Task.orbit],
        performTask[Task.land],
        performTask[Task.facAttackGroup],
        performTask[Task.bombing],
        performTask[Task.attackMapObject],
        performTask[Task.follow],
      ],
      recon: [
        performTask[Task.noTask],
        performTask[Task.orbit],
        performTask[Task.land],
        performTask[Task.follow],
      ],
      transport: [
        performTask[Task.noTask],
        performTask[Task.orbit],
        performTask[Task.land],
        performTask[Task.follow],
        performTask[Task.embarking],
        performTask[Task.disembarking],
        performTask[Task.cargoTransportation],
      ],
      escort: [
        performTask[Task.noTask],
        performTask[Task.orbit],
        performTask[Task.land],
        performTask[Task.escort],
      ],
    },
    enrouteTask: {
      default: [
        enrouteTask[EnrouteTask.noEnrouteTask],
        enrouteTask[EnrouteTask.engageTargets],
        enrouteTask[EnrouteTask.engageTargetsInZone],
        enrouteTask[EnrouteTask.engageGroup],
        enrouteTask[EnrouteTask.engageUnit],
        enrouteTask[EnrouteTask.fac],
        enrouteTask[EnrouteTask.facEngageGroup],
      ],
      nothing: [enrouteTask[EnrouteTask.noEnrouteTask]],
      sead: [
        enrouteTask[EnrouteTask.noEnrouteTask],
        enrouteTask[EnrouteTask.engageTargets],
        enrouteTask[EnrouteTask.engageTargetsInZone],
        enrouteTask[EnrouteTask.engageGroup],
        enrouteTask[EnrouteTask.engageUnit],
        enrouteTask[EnrouteTask.sead],
      ],
      antiShipStrike: [
        enrouteTask[EnrouteTask.noEnrouteTask],
        enrouteTask[EnrouteTask.engageTargets],
        enrouteTask[EnrouteTask.engageTargetsInZone],
        enrouteTask[EnrouteTask.engageGroup],
        enrouteTask[EnrouteTask.engageUnit],
        enrouteTask[EnrouteTask.antiShip],
      ],
      cas: [
        enrouteTask[EnrouteTask.noEnrouteTask],
        enrouteTask[EnrouteTask.engageTargets],
        enrouteTask[EnrouteTask.engageTargetsInZone],
        enrouteTask[EnrouteTask.engageGroup],
        enrouteTask[EnrouteTask.engageUnit],
        enrouteTask[EnrouteTask.cas],
      ],
      groundAttack: [enrouteTask[EnrouteTask.noEnrouteTask]],
      afac: [
        enrouteTask[EnrouteTask.noEnrouteTask],
        enrouteTask[EnrouteTask.engageTargets],
        enrouteTask[EnrouteTask.engageTargetsInZone],
        enrouteTask[EnrouteTask.engageGroup],
        enrouteTask[EnrouteTask.engageUnit],
        enrouteTask[EnrouteTask.fac],
        enrouteTask[EnrouteTask.facEngageGroup],
      ],
      recon: [enrouteTask[EnrouteTask.noEnrouteTask]],
    },
    commands: {
      default: [
        commands[PerformCommand.noAction],
        commands[PerformCommand.runScript],
        commands[PerformCommand.scriptFile],
        commands[PerformCommand.setFrequency],
        commands[PerformCommand.setFrequencyForUnit],
        commands[PerformCommand.transmitMessage],
        commands[PerformCommand.stopTransmitting],
        commands[PerformCommand.switchWaypoint],
        commands[PerformCommand.switchAction],
        commands[PerformCommand.setInvisible],
        commands[PerformCommand.setImmortal],
        commands[PerformCommand.start],
        commands[PerformCommand.activateBeacon],
        commands[PerformCommand.deactivateBeacon],
        commands[PerformCommand.elprs],
        commands[PerformCommand.smokeOnOff],
      ],
    },
    options: {
      default: [
        options[OptionName.noOption],
        options[OptionName.roe],
        options[OptionName.reactionOnThreat],
        options[OptionName.radarUsing],
        options[OptionName.flareUsing],
        options[OptionName.formation],
        options[OptionName.rtbOnBingo],
        options[OptionName.rtbOnOutOfAmmo],
        options[OptionName.silence],
        options[OptionName.awarnessLevel],
        options[OptionName.jettTanksIfEmpty],
        options[OptionName.prohibitWpPassReport],
        options[OptionName.radioUsageContact],
        options[OptionName.radioUsageEngage],
        options[OptionName.radioUsageKill],
      ],
    },
  },
  vehicle: {
    task: {
      default: [
        performTask[Task.noTask],
        performTask[Task.facAttackGroup],
        performTask[Task.fireAtPoint],
        performTask[Task.attackGroup],
        performTask[Task.attackUnit],
        performTask[Task.hold],
        performTask[Task.embarkToTransport],
        performTask[Task.goToWaypoint],
        performTask[Task.embarking],
        performTask[Task.disembarking],
        performTask[Task.attachTrailer],
        performTask[Task.detachTrailer],
      ],
    },
    enrouteTask: {
      default: [
        enrouteTask[EnrouteTask.noEnrouteTask],
        enrouteTask[EnrouteTask.fac],
        enrouteTask[EnrouteTask.facEngageGroup],
        enrouteTask[EnrouteTask.ewr],
      ],
    },
    commands: {
      default: [
        commands[PerformCommand.noAction],
        commands[PerformCommand.runScript],
        commands[PerformCommand.scriptFile],
        commands[PerformCommand.setCallsign],
        commands[PerformCommand.setFrequency],
        commands[PerformCommand.transmitMessage],
        commands[PerformCommand.stopTransmitting],
        commands[Task.goToWaypoint],
        commands[PerformCommand.setInvisible],
        commands[PerformCommand.setImmortal],
        commands[PerformCommand.elprs],
        commands[PerformCommand.activateBeacon],
        commands[PerformCommand.deactivateBeacon],
      ],
    },
    options: {
      default: [
        options[OptionName.noOption],
        options[OptionName.roe],
        options[OptionName.disperseOnAttack],
        options[OptionName.alarmState],
        options[OptionName.awarnessLevel],
        options[OptionName.engageAirWeapons],
        options[OptionName.aircraftInterceptRange],
        options[OptionName.altRestrictionMin],
        options[OptionName.altRestrictionMax],
        options[OptionName.restrictTarget],
      ],
    },
  },
  ship: {
    task: {
      default: [
        performTask[Task.noTask],
        performTask[Task.fireAtPoint],
        performTask[Task.attackGroup],
        performTask[Task.goToWaypoint],
        performTask[Task.shipHoldPoint],
      ],
    },
    enrouteTask: {
      default: [enrouteTask[EnrouteTask.noEnrouteTask]],
    },
    commands: {
      default: [
        commands[PerformCommand.noAction],
        commands[PerformCommand.runScript],
        commands[PerformCommand.scriptFile],
        commands[PerformCommand.setInvisible],
        commands[PerformCommand.setImmortal],
        commands[PerformCommand.activateBeacon],
        commands[PerformCommand.deactivateBeacon],
        commands[PerformCommand.activateICLS],
        commands[PerformCommand.deactivateICLS],
        commands[Task.goToWaypoint],
        commands[PerformCommand.loadingShip],
        commands[PerformCommand.activateLink4],
        commands[PerformCommand.deactivateLink4],
        commands[PerformCommand.activateACLS],
        commands[PerformCommand.deactivateACLS],
        commands[Task.shipHoldPoint],
      ],
    },
    options: {
      default: [
        options[OptionName.noOption],
        options[OptionName.roe],
        options[OptionName.alarmState],
        options[OptionName.awarnessLevel],
        options[OptionName.engageAirWeapons],
        options[OptionName.aircraftInterceptRange],
      ],
    },
  },
};
